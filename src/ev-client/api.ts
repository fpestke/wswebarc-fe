/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Tesla JSON API
 * A swagger representation of the unofficial Tesla API for Model S and Model X Vehicles.  To use the API directly from the SwaggerHub documentation, click the `Interactive API Docs` tab and follow these steps: * Authenticate with the `/oauth/token` operation.  Use your **tesla** email address and password * In the response, copy the `access_token` value. * Click the `Authenticate` button and enter `Bearer {access_token}` (replace `{access_token}` with the value you copied previously)  You are now logged in to the Tesla API from within the Swagger docs.  Typical usage of the API is performed by:  * Since the API allows access to multiple Tesla vehicles under the same account, copy your `id` from the `/api/1/vehicles` operation response. * Enter the `id` value in the appropriate locations when calling the API 
 *
 * OpenAPI spec version: 2.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://ev-backend.charging-attendant.com".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface BooleanResponse
 */
export interface BooleanResponse {
    /**
     * 
     * @type {boolean}
     * @memberof BooleanResponse
     */
    response?: boolean;
}

/**
 * 
 * @export
 * @interface ChargeState
 */
export interface ChargeState {
    /**
     * ideal miles
     * @type {number}
     * @memberof ChargeState
     */
    idealBatteryRange?: number;
    /**
     * 
     * @type {string}
     * @memberof ChargeState
     */
    chargingState?: string;
    /**
     * kW (rounded down) of charger
     * @type {number}
     * @memberof ChargeState
     */
    chargerPower?: number;
    /**
     * current flowing into battery
     * @type {number}
     * @memberof ChargeState
     */
    batteryCurrent?: number;
    /**
     * 
     * @type {number}
     * @memberof ChargeState
     */
    chargePortDoorOpen?: number;
    /**
     * 
     * @type {number}
     * @memberof ChargeState
     */
    chargeStartingRange?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChargeState
     */
    chargeToMaxRange?: boolean;
    /**
     * current actually being drawn
     * @type {number}
     * @memberof ChargeState
     */
    chargerActualCurrent?: number;
    /**
     * rated miles
     * @type {number}
     * @memberof ChargeState
     */
    batteryRange?: number;
    /**
     * mi/hr if charging or -1 if not charging
     * @type {number}
     * @memberof ChargeState
     */
    chargeRate?: number;
    /**
     * 
     * @type {number}
     * @memberof ChargeState
     */
    maxRangeChargeCounter?: number;
    /**
     * max current allowed by charger & adapter
     * @type {number}
     * @memberof ChargeState
     */
    chargerPilotCurrent?: number;
    /**
     * range estimated from recent driving
     * @type {number}
     * @memberof ChargeState
     */
    estBatteryRange?: number;
    /**
     * only present while charging
     * @type {number}
     * @memberof ChargeState
     */
    timeToFullCharge?: number;
    /**
     * charge percentage
     * @type {number}
     * @memberof ChargeState
     */
    batteryLevel?: number;
    /**
     * 
     * @type {number}
     * @memberof ChargeState
     */
    chargeStartingSoc?: number;
    /**
     * connected to Supercharger?
     * @type {boolean}
     * @memberof ChargeState
     */
    fastChargerPresent?: boolean;
    /**
     * voltage present only while charging
     * @type {number}
     * @memberof ChargeState
     */
    chargerVoltage?: number;
}

/**
 * 
 * @export
 * @interface ChargeStateResponse
 */
export interface ChargeStateResponse {
    /**
     * 
     * @type {ChargeState}
     * @memberof ChargeStateResponse
     */
    response?: ChargeState;
}

/**
 * 
 * @export
 * @interface ClimateState
 */
export interface ClimateState {
    /**
     * degC inside car
     * @type {number}
     * @memberof ClimateState
     */
    insideTemp?: number;
    /**
     * degC outside car or null
     * @type {number}
     * @memberof ClimateState
     */
    outsideTemp?: number;
    /**
     * degC of driver temperature setpoint
     * @type {number}
     * @memberof ClimateState
     */
    driverTempSetting?: number;
    /**
     * degC of passenger temperature setpoint
     * @type {number}
     * @memberof ClimateState
     */
    passengerTempSetting?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ClimateState
     */
    isAutoConditioningOn?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ClimateState
     */
    isFrontDefrosterOn?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ClimateState
     */
    isRearDefrosterOn?: boolean;
    /**
     * fan speed 0-6 or null
     * @type {number}
     * @memberof ClimateState
     */
    fanStatus?: number;
}

/**
 * 
 * @export
 * @interface ClimateStateResponse
 */
export interface ClimateStateResponse {
    /**
     * 
     * @type {ClimateState}
     * @memberof ClimateStateResponse
     */
    result?: ClimateState;
}

/**
 * 
 * @export
 * @interface DriveState
 */
export interface DriveState {
    /**
     * 
     * @type {string}
     * @memberof DriveState
     */
    shiftState?: string;
    /**
     * 
     * @type {number}
     * @memberof DriveState
     */
    speed?: number;
    /**
     * degrees north of equator
     * @type {number}
     * @memberof DriveState
     */
    latitude?: number;
    /**
     * degrees west of the prime meridian
     * @type {number}
     * @memberof DriveState
     */
    longitude?: number;
    /**
     * integer compass heading
     * @type {number}
     * @memberof DriveState
     */
    heading?: number;
    /**
     * 
     * @type {any}
     * @memberof DriveState
     */
    gpsAsOf?: any;
}

/**
 * 
 * @export
 * @interface DriveStateResponse
 */
export interface DriveStateResponse {
    /**
     * 
     * @type {DriveState}
     * @memberof DriveStateResponse
     */
    response?: DriveState;
}

/**
 * 
 * @export
 * @interface GuiState
 */
export interface GuiState {
    /**
     * 
     * @type {string}
     * @memberof GuiState
     */
    guiDistanceUnits?: string;
    /**
     * 
     * @type {string}
     * @memberof GuiState
     */
    guiTemperatureUnits?: string;
    /**
     * 
     * @type {string}
     * @memberof GuiState
     */
    guiChargeRateUnits?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GuiState
     */
    gui24HourTime?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GuiState
     */
    guiRangeDisplay?: string;
}

/**
 * 
 * @export
 * @interface GuiStateResponse
 */
export interface GuiStateResponse {
    /**
     * 
     * @type {GuiState}
     * @memberof GuiStateResponse
     */
    response?: GuiState;
}

/**
 * 
 * @export
 * @interface LoginFailure
 */
export interface LoginFailure {
    /**
     * 
     * @type {boolean}
     * @memberof LoginFailure
     */
    status?: boolean;
    /**
     * 
     * @type {number}
     * @memberof LoginFailure
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof LoginFailure
     */
    region?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginFailure
     */
    message?: string;
    /**
     * 
     * @type {any}
     * @memberof LoginFailure
     */
    data?: any;
    /**
     * 
     * @type {string}
     * @memberof LoginFailure
     */
    homeRegion?: string;
}

/**
 * 
 * @export
 * @interface LoginSuccess
 */
export interface LoginSuccess {
    /**
     * 
     * @type {string}
     * @memberof LoginSuccess
     */
    accessToken?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginSuccess
     */
    tokenType?: string;
    /**
     * 
     * @type {number}
     * @memberof LoginSuccess
     */
    expiresIn?: number;
}

/**
 * 
 * @export
 * @interface Vehicle
 */
export interface Vehicle {
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    display_name?: string;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    vehicle_id?: string;
    /**
     * 
     * @type {number}
     * @memberof Vehicle
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    state?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Vehicle
     */
    tokens?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    vin?: string;
    /**
     * 
     * @type {number}
     * @memberof Vehicle
     */
    id?: number;
    /**
     * comma-separated list of options
     * @type {string}
     * @memberof Vehicle
     */
    optionCodes?: string;
}

/**
 * 
 * @export
 * @interface VehicleState
 */
export interface VehicleState {
    /**
     * panoramic roof is installed
     * @type {boolean}
     * @memberof VehicleState
     */
    sunRoofInstalled?: boolean;
    /**
     * driver's side front door open
     * @type {boolean}
     * @memberof VehicleState
     */
    df?: boolean;
    /**
     * passenger's side rear door open
     * @type {boolean}
     * @memberof VehicleState
     */
    pr?: boolean;
    /**
     * rear trunk is open
     * @type {boolean}
     * @memberof VehicleState
     */
    rt?: boolean;
    /**
     * gray rims installed
     * @type {boolean}
     * @memberof VehicleState
     */
    darkRims?: boolean;
    /**
     * car is locked
     * @type {boolean}
     * @memberof VehicleState
     */
    locked?: boolean;
    /**
     * driver's side rear door open
     * @type {boolean}
     * @memberof VehicleState
     */
    dr?: boolean;
    /**
     * front trunk is open
     * @type {boolean}
     * @memberof VehicleState
     */
    ft?: boolean;
    /**
     * passenger's side front door open
     * @type {boolean}
     * @memberof VehicleState
     */
    pf?: boolean;
    /**
     * None for panoramic roof
     * @type {string}
     * @memberof VehicleState
     */
    roofColor?: string;
    /**
     * 
     * @type {string}
     * @memberof VehicleState
     */
    perfConfig?: string;
    /**
     * 
     * @type {string}
     * @memberof VehicleState
     */
    sunRoofState?: string;
    /**
     * car firmware version
     * @type {string}
     * @memberof VehicleState
     */
    carVerson?: string;
    /**
     * null if not installed
     * @type {number}
     * @memberof VehicleState
     */
    sunRoofPercentOpen?: number;
    /**
     * spoiler is installed
     * @type {boolean}
     * @memberof VehicleState
     */
    hasSpoiler?: boolean;
    /**
     * wheel type installed
     * @type {string}
     * @memberof VehicleState
     */
    wheelType?: string;
}

/**
 * 
 * @export
 * @interface VehicleStateResponse
 */
export interface VehicleStateResponse {
    /**
     * 
     * @type {VehicleState}
     * @memberof VehicleStateResponse
     */
    response?: VehicleState;
}

/**
 * 
 * @export
 * @interface VehiclesResponse
 */
export interface VehiclesResponse {
    /**
     * 
     * @type {Array<Vehicle>}
     * @memberof VehiclesResponse
     */
    response?: Array<Vehicle>;
    /**
     * 
     * @type {number}
     * @memberof VehiclesResponse
     */
    count?: number;
}


/**
 * AuthenticationApi - fetch parameter creator
 * @export
 */
export const AuthenticationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} grantType 
         * @param {string} clientId 
         * @param {string} email the user email address
         * @param {string} password the password
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(grantType: string, clientId: string, email: string, password: string, clientSecret?: string, options: any = {}): FetchArgs {
            // verify required parameter 'grantType' is not null or undefined
            if (grantType === null || grantType === undefined) {
                throw new RequiredError('grantType','Required parameter grantType was null or undefined when calling login.');
            }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError('clientId','Required parameter clientId was null or undefined when calling login.');
            }
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling login.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling login.');
            }
            const localVarPath = `/oauth/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (grantType !== undefined) {
                localVarFormParams.set('grant_type', grantType as any);
            }

            if (clientId !== undefined) {
                localVarFormParams.set('client_id', clientId as any);
            }

            if (clientSecret !== undefined) {
                localVarFormParams.set('client_secret', clientSecret as any);
            }

            if (email !== undefined) {
                localVarFormParams.set('email', email as any);
            }

            if (password !== undefined) {
                localVarFormParams.set('password', password as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} grantType 
         * @param {string} clientId 
         * @param {string} email the user email address
         * @param {string} password the password
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(grantType: string, clientId: string, email: string, password: string, clientSecret?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginSuccess> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).login(grantType, clientId, email, password, clientSecret, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} grantType 
         * @param {string} clientId 
         * @param {string} email the user email address
         * @param {string} password the password
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(grantType: string, clientId: string, email: string, password: string, clientSecret?: string, options?: any) {
            return AuthenticationApiFp(configuration).login(grantType, clientId, email, password, clientSecret, options)(fetch, basePath);
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @param {string} grantType 
     * @param {string} clientId 
     * @param {string} email the user email address
     * @param {string} password the password
     * @param {string} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public login(grantType: string, clientId: string, email: string, password: string, clientSecret?: string, options?: any) {
        return AuthenticationApiFp(this.configuration).login(grantType, clientId, email, password, clientSecret, options)(this.fetch, this.basePath);
    }

}

/**
 * OperationsApi - fetch parameter creator
 * @export
 */
export const OperationsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoConditioningStart(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling autoConditioningStart.');
            }
            const localVarPath = `/api/1/vehicles/{id}/command/auto_conditioning_start`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoConditioningStop(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling autoConditioningStop.');
            }
            const localVarPath = `/api/1/vehicles/{id}/command/auto_conditioning_stop`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeMaxRange(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling chargeMaxRange.');
            }
            const localVarPath = `/api/1/vehicles/{id}/command/charge_max_range`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeStart(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling chargeStart.');
            }
            const localVarPath = `/api/1/vehicles/{id}/command/charge_start`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeStop(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling chargeStop.');
            }
            const localVarPath = `/api/1/vehicles/{id}/command/charge_stop`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climateState(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling climateState.');
            }
            const localVarPath = `/api/1/vehicles/{id}/data_request/climate_state`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doorLock(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling doorLock.');
            }
            const localVarPath = `/api/1/vehicles/{id}/command/door_lock`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doorUnlock(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling doorUnlock.');
            }
            const localVarPath = `/api/1/vehicles/{id}/command/door_unlock`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flashLights(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling flashLights.');
            }
            const localVarPath = `/api/1/vehicles/{id}/command/flash_lights`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        honkHorn(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling honkHorn.');
            }
            const localVarPath = `/api/1/vehicles/{id}/command/honk_horn`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remoteStartDrive(id: string, password: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling remoteStartDrive.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling remoteStartDrive.');
            }
            const localVarPath = `/api/1/vehicles/{id}/command/remote_start_drive`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {string} percent The percentage value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChargeLimit(id: string, percent: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setChargeLimit.');
            }
            // verify required parameter 'percent' is not null or undefined
            if (percent === null || percent === undefined) {
                throw new RequiredError('percent','Required parameter percent was null or undefined when calling setChargeLimit.');
            }
            const localVarPath = `/api/1/vehicles/{id}/command/set_charge_limit`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (percent !== undefined) {
                localVarQueryParameter['percent'] = percent;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {string} driverTemp The desired temperature on the driver&#39;s side in celcius.
         * @param {string} passengerTemp The desired temperature on the passenger&#39;s side in celcius.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTemps(id: string, driverTemp: string, passengerTemp: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setTemps.');
            }
            // verify required parameter 'driverTemp' is not null or undefined
            if (driverTemp === null || driverTemp === undefined) {
                throw new RequiredError('driverTemp','Required parameter driverTemp was null or undefined when calling setTemps.');
            }
            // verify required parameter 'passengerTemp' is not null or undefined
            if (passengerTemp === null || passengerTemp === undefined) {
                throw new RequiredError('passengerTemp','Required parameter passengerTemp was null or undefined when calling setTemps.');
            }
            const localVarPath = `/api/1/vehicles/{id}/command/set_temps`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (driverTemp !== undefined) {
                localVarQueryParameter['driver_temp'] = driverTemp;
            }

            if (passengerTemp !== undefined) {
                localVarQueryParameter['passenger_temp'] = passengerTemp;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {string} state The desired state of the panoramic roof. The approximate percent\\ \\ open values for each state are &#x60;open&#x60; &#x3D; 100%, &#x60;close&#x60; &#x3D; 0%, &#x60;comfort&#x60;\\ \\ &#x3D; 80%, and &#x60;vent&#x60; &#x3D; ~15%
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sunRoofControl(id: string, state: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling sunRoofControl.');
            }
            // verify required parameter 'state' is not null or undefined
            if (state === null || state === undefined) {
                throw new RequiredError('state','Required parameter state was null or undefined when calling sunRoofControl.');
            }
            const localVarPath = `/api/1/vehicles/{id}/command/sun_roof_control`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {'rear'} whichTrunk the trunk to open
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunkOpen(id: string, whichTrunk: 'rear', options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling trunkOpen.');
            }
            // verify required parameter 'whichTrunk' is not null or undefined
            if (whichTrunk === null || whichTrunk === undefined) {
                throw new RequiredError('whichTrunk','Required parameter whichTrunk was null or undefined when calling trunkOpen.');
            }
            const localVarPath = `/api/1/vehicles/{id}/command/trunk_open`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (whichTrunk !== undefined) {
                localVarQueryParameter['which_trunk'] = whichTrunk;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleState(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling vehicleState.');
            }
            const localVarPath = `/api/1/vehicles/{id}/data_request/vehicle_state`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wakeUp(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling wakeUp.');
            }
            const localVarPath = `/api/1/vehicles/{id}/wake_up`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperationsApi - functional programming interface
 * @export
 */
export const OperationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoConditioningStart(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanResponse> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).autoConditioningStart(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoConditioningStop(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).autoConditioningStop(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeMaxRange(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanResponse> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).chargeMaxRange(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeStart(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanResponse> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).chargeStart(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeStop(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanResponse> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).chargeStop(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climateState(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ClimateStateResponse> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).climateState(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doorLock(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanResponse> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).doorLock(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doorUnlock(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanResponse> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).doorUnlock(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flashLights(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanResponse> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).flashLights(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        honkHorn(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanResponse> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).honkHorn(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remoteStartDrive(id: string, password: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanResponse> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).remoteStartDrive(id, password, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {string} percent The percentage value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChargeLimit(id: string, percent: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanResponse> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).setChargeLimit(id, percent, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {string} driverTemp The desired temperature on the driver&#39;s side in celcius.
         * @param {string} passengerTemp The desired temperature on the passenger&#39;s side in celcius.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTemps(id: string, driverTemp: string, passengerTemp: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanResponse> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).setTemps(id, driverTemp, passengerTemp, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {string} state The desired state of the panoramic roof. The approximate percent\\ \\ open values for each state are &#x60;open&#x60; &#x3D; 100%, &#x60;close&#x60; &#x3D; 0%, &#x60;comfort&#x60;\\ \\ &#x3D; 80%, and &#x60;vent&#x60; &#x3D; ~15%
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sunRoofControl(id: string, state: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanResponse> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).sunRoofControl(id, state, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {'rear'} whichTrunk the trunk to open
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunkOpen(id: string, whichTrunk: 'rear', options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanResponse> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).trunkOpen(id, whichTrunk, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleState(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VehicleStateResponse> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).vehicleState(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wakeUp(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanResponse> {
            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).wakeUp(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OperationsApi - factory interface
 * @export
 */
export const OperationsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoConditioningStart(id: string, options?: any) {
            return OperationsApiFp(configuration).autoConditioningStart(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoConditioningStop(id: string, options?: any) {
            return OperationsApiFp(configuration).autoConditioningStop(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeMaxRange(id: string, options?: any) {
            return OperationsApiFp(configuration).chargeMaxRange(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeStart(id: string, options?: any) {
            return OperationsApiFp(configuration).chargeStart(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeStop(id: string, options?: any) {
            return OperationsApiFp(configuration).chargeStop(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climateState(id: string, options?: any) {
            return OperationsApiFp(configuration).climateState(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doorLock(id: string, options?: any) {
            return OperationsApiFp(configuration).doorLock(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doorUnlock(id: string, options?: any) {
            return OperationsApiFp(configuration).doorUnlock(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flashLights(id: string, options?: any) {
            return OperationsApiFp(configuration).flashLights(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        honkHorn(id: string, options?: any) {
            return OperationsApiFp(configuration).honkHorn(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remoteStartDrive(id: string, password: string, options?: any) {
            return OperationsApiFp(configuration).remoteStartDrive(id, password, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {string} percent The percentage value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setChargeLimit(id: string, percent: string, options?: any) {
            return OperationsApiFp(configuration).setChargeLimit(id, percent, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {string} driverTemp The desired temperature on the driver&#39;s side in celcius.
         * @param {string} passengerTemp The desired temperature on the passenger&#39;s side in celcius.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTemps(id: string, driverTemp: string, passengerTemp: string, options?: any) {
            return OperationsApiFp(configuration).setTemps(id, driverTemp, passengerTemp, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {string} state The desired state of the panoramic roof. The approximate percent\\ \\ open values for each state are &#x60;open&#x60; &#x3D; 100%, &#x60;close&#x60; &#x3D; 0%, &#x60;comfort&#x60;\\ \\ &#x3D; 80%, and &#x60;vent&#x60; &#x3D; ~15%
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sunRoofControl(id: string, state: string, options?: any) {
            return OperationsApiFp(configuration).sunRoofControl(id, state, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {'rear'} whichTrunk the trunk to open
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunkOpen(id: string, whichTrunk: 'rear', options?: any) {
            return OperationsApiFp(configuration).trunkOpen(id, whichTrunk, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleState(id: string, options?: any) {
            return OperationsApiFp(configuration).vehicleState(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wakeUp(id: string, options?: any) {
            return OperationsApiFp(configuration).wakeUp(id, options)(fetch, basePath);
        },
    };
};

/**
 * OperationsApi - object-oriented interface
 * @export
 * @class OperationsApi
 * @extends {BaseAPI}
 */
export class OperationsApi extends BaseAPI {
    /**
     * 
     * @param {string} id The ID number of the car
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public autoConditioningStart(id: string, options?: any) {
        return OperationsApiFp(this.configuration).autoConditioningStart(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public autoConditioningStop(id: string, options?: any) {
        return OperationsApiFp(this.configuration).autoConditioningStop(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public chargeMaxRange(id: string, options?: any) {
        return OperationsApiFp(this.configuration).chargeMaxRange(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public chargeStart(id: string, options?: any) {
        return OperationsApiFp(this.configuration).chargeStart(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public chargeStop(id: string, options?: any) {
        return OperationsApiFp(this.configuration).chargeStop(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public climateState(id: string, options?: any) {
        return OperationsApiFp(this.configuration).climateState(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public doorLock(id: string, options?: any) {
        return OperationsApiFp(this.configuration).doorLock(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public doorUnlock(id: string, options?: any) {
        return OperationsApiFp(this.configuration).doorUnlock(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public flashLights(id: string, options?: any) {
        return OperationsApiFp(this.configuration).flashLights(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public honkHorn(id: string, options?: any) {
        return OperationsApiFp(this.configuration).honkHorn(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public remoteStartDrive(id: string, password: string, options?: any) {
        return OperationsApiFp(this.configuration).remoteStartDrive(id, password, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {string} percent The percentage value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public setChargeLimit(id: string, percent: string, options?: any) {
        return OperationsApiFp(this.configuration).setChargeLimit(id, percent, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {string} driverTemp The desired temperature on the driver&#39;s side in celcius.
     * @param {string} passengerTemp The desired temperature on the passenger&#39;s side in celcius.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public setTemps(id: string, driverTemp: string, passengerTemp: string, options?: any) {
        return OperationsApiFp(this.configuration).setTemps(id, driverTemp, passengerTemp, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {string} state The desired state of the panoramic roof. The approximate percent\\ \\ open values for each state are &#x60;open&#x60; &#x3D; 100%, &#x60;close&#x60; &#x3D; 0%, &#x60;comfort&#x60;\\ \\ &#x3D; 80%, and &#x60;vent&#x60; &#x3D; ~15%
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public sunRoofControl(id: string, state: string, options?: any) {
        return OperationsApiFp(this.configuration).sunRoofControl(id, state, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {'rear'} whichTrunk the trunk to open
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public trunkOpen(id: string, whichTrunk: 'rear', options?: any) {
        return OperationsApiFp(this.configuration).trunkOpen(id, whichTrunk, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public vehicleState(id: string, options?: any) {
        return OperationsApiFp(this.configuration).vehicleState(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public wakeUp(id: string, options?: any) {
        return OperationsApiFp(this.configuration).wakeUp(id, options)(this.fetch, this.basePath);
    }

}

/**
 * StateApi - fetch parameter creator
 * @export
 */
export const StateApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeState(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling chargeState.');
            }
            const localVarPath = `/api/1/vehicles/{id}/data_request/charge_state`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driveState(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling driveState.');
            }
            const localVarPath = `/api/1/vehicles/{id}/data_request/drive_state`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guiSettings(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling guiSettings.');
            }
            const localVarPath = `/api/1/vehicles/{id}/data_request/gui_settings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mobileEnabled(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling mobileEnabled.');
            }
            const localVarPath = `/api/1/vehicles/{id}/mobile_enabled`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StateApi - functional programming interface
 * @export
 */
export const StateApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeState(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ChargeStateResponse> {
            const localVarFetchArgs = StateApiFetchParamCreator(configuration).chargeState(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driveState(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DriveStateResponse> {
            const localVarFetchArgs = StateApiFetchParamCreator(configuration).driveState(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guiSettings(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GuiStateResponse> {
            const localVarFetchArgs = StateApiFetchParamCreator(configuration).guiSettings(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mobileEnabled(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanResponse> {
            const localVarFetchArgs = StateApiFetchParamCreator(configuration).mobileEnabled(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * StateApi - factory interface
 * @export
 */
export const StateApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeState(id: string, options?: any) {
            return StateApiFp(configuration).chargeState(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driveState(id: string, options?: any) {
            return StateApiFp(configuration).driveState(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guiSettings(id: string, options?: any) {
            return StateApiFp(configuration).guiSettings(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id The ID number of the car
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mobileEnabled(id: string, options?: any) {
            return StateApiFp(configuration).mobileEnabled(id, options)(fetch, basePath);
        },
    };
};

/**
 * StateApi - object-oriented interface
 * @export
 * @class StateApi
 * @extends {BaseAPI}
 */
export class StateApi extends BaseAPI {
    /**
     * 
     * @param {string} id The ID number of the car
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StateApi
     */
    public chargeState(id: string, options?: any) {
        return StateApiFp(this.configuration).chargeState(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StateApi
     */
    public driveState(id: string, options?: any) {
        return StateApiFp(this.configuration).driveState(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StateApi
     */
    public guiSettings(id: string, options?: any) {
        return StateApiFp(this.configuration).guiSettings(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id The ID number of the car
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StateApi
     */
    public mobileEnabled(id: string, options?: any) {
        return StateApiFp(this.configuration).mobileEnabled(id, options)(this.fetch, this.basePath);
    }

}

/**
 * VehiclesApi - fetch parameter creator
 * @export
 */
export const VehiclesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicles(options: any = {}): FetchArgs {
            const localVarPath = `/api/1/vehicles`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehiclesApi - functional programming interface
 * @export
 */
export const VehiclesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicles(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VehiclesResponse> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).vehicles(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * VehiclesApi - factory interface
 * @export
 */
export const VehiclesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicles(options?: any) {
            return VehiclesApiFp(configuration).vehicles(options)(fetch, basePath);
        },
    };
};

/**
 * VehiclesApi - object-oriented interface
 * @export
 * @class VehiclesApi
 * @extends {BaseAPI}
 */
export class VehiclesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public vehicles(options?: any) {
        return VehiclesApiFp(this.configuration).vehicles(options)(this.fetch, this.basePath);
    }

}

